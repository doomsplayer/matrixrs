var searchIndex = {};
searchIndex['matrixrs'] = {"items":[[0,"","matrixrs","Matrix -- Generic 2D Matrix implementation in Rust.\nCurrent Version -- 0.3"],[1,"Matrix","","The Matrix struct represent a matrix"],[11,"row","","Number of rows",0],[11,"col","","Number of columns",0],[11,"data","","Table (Vector of Vector) of data values in the matrix\nits a vec of rows which are vecs of elems",0],[1,"MatrixIter","","The object that has the implemention of Iterator trait"],[11,"matrix","","",1],[11,"curr_row","","",1],[11,"curr_col","","",1],[3,"zeros","","Create an MxN zero matrix of type which implements num::Zero trait."],[3,"ones","","Create an MxN ones matrix of type which implements num::One trait."],[3,"eye","","Create a dim x dim identity matrix of type which implements num::Zero and num::One trait."],[6,"ToMatrix","","A trait that convert T to Matrix<T>"],[9,"to_matrix","","The convertion function",2],[10,"from_fn","","Create an m-by-n matrix by using a function func\nthat returns a number given row and column.",0],[10,"size","","Return the size of a Matrix as (row, column).",0],[10,"from_elem","","Create an m-by-n matrix, where each element is a clone of val.",0],[10,"at","","Return the element at row, col.\nWrapped by Index trait.",0],[10,"row_vec","","return a vec of a row",0],[10,"row","","Return specified row from an MxN matrix as a 1xN matrix.",0],[10,"col_vec","","return a vec of a column",0],[10,"col","","Return specified col from an MxN matrix as an Mx1 matrix.",0],[10,"augment","","Return a new matrix, self augmented by matrix mat.\nAn MxN matrix augmented with an MxC matrix produces an Mx(N+C) matrix.",0],[10,"transpose","","Return the transpose of the matrix.\nThe transpose of a matrix MxN has dimensions NxM.",0],[10,"apply","","Call an applier function with each index in self.\nInput to applier is two parameters: row, col.",0],[10,"fmt","","",0],[10,"map","","Return a copy of self where each value has been\noperated upon by mapper.",0],[10,"sum","","Return the summation of all elements in self.",0],[10,"to_f64","","Return a new Matrix with all of the elements of self cast to f64.",0],[10,"approx_eq","","Return whether all of the elements of self are within\nthreshold of all of the corresponding elements of other.",0],[10,"lu","","Perform the LU decomposition of square matrix self, and return\nthe tuple (P,L,U) where P*self = L*U, and L and U are triangular.",0],[10,"det","","Return the determinant of square matrix self\nvia LU decomposition.\nIf not a square matrix, fail.",0],[10,"add","","Return the sum of two matrices with the same dimensions.\nIf sizes don't match, fail.",0],[10,"neg","","Return a matrix of the negation of each value in self.",0],[10,"sub","","Return the difference of two matrices with the same dimensions.\nIf sizes don't match, fail.",0],[10,"mul","","Return the product of multiplying two matrices.\nMxR matrix * RxN matrix = MxN matrix.\nIf inner dimensions don't match, fail.",0],[10,"index","","Return the element at the location specified by a (row, column) tuple.",0],[10,"not","","Return the transpose of self.",0],[10,"bitor","","Return self augmented by matrix rhs.",0],[10,"bitxor","","Return a matrix of self raised to the power of rhs.\nSelf must be a square matrix.",0],[10,"iter","","Return a iterator of the matrix",0],[10,"from_iter","","convert to a square matrix that some elements might be truncated",0],[10,"next","","",1]],"paths":[[1,"Matrix"],[1,"MatrixIter"],[6,"ToMatrix"]]};
initSearch(searchIndex);
